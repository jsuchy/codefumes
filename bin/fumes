#!/usr/bin/env ruby
$: << File.expand_path(File.dirname(__FILE__) + '/../lib')

require 'codefumes'

begin
  require 'gli'
rescue LoadError
  require 'rubygems'
  gem 'gli'
  require 'gli'
end

include GLI
include CodeFumes


desc 'Synchronize local master branch history with a CodeFumes project'
command :sync do |c|
  c.desc 'Public key of CodeFumes project'
  c.arg_name 'pub-key-here'
  c.default_value nil
  c.flag [:p,:public_key]

  c.desc 'API key of CodeFumes project'
  c.arg_name 'api-key-here'
  c.default_value nil
  c.flag [:a,:api_key]

  c.action do |global_options,options,args|
    harvester = Harvester.new(:public_key => options[:p], :private_key => options[:a])

    if (results = harvester.publish_data!) == false
      puts "Error syncing with CodeFumes project. Please try again."
      exit(1)
    else
      if results.empty?
        puts "Local repository is in sync with server. No updates posted."
      else
        puts "Successfully saved #{results[:successful_count]} of #{results[:total_count]} payloads."
        puts "Project saved to CodeFumes.com. Visit #{harvester.short_uri}"
      end
      puts "Exiting."
      puts
    end
  end
end

desc 'Claim project(s) on CodeFumes.com'
long_desc <<-DESC
  Claiming a project links the specified key stored in the project
  repository (or the key specified as an argument) with the account
  credentials stored in your CodeFumes config file.
  DESC
command :claim do |c|
  c.desc 'Public key of CodeFumes project'
  c.arg_name 'pub-key-here'
  c.default_value nil
  c.flag [:public_key, :p]

  c.desc 'Claim all projects listed in your CodeFumes config file'
  c.switch [:all, :a]

  c.action do |global_options, options, args|
    public_keys_specified(options).each do |public_key|
      print "Claiming...'#{public_key}': "
      project = Project.find(public_key.to_s)

      if project.nil?
        puts "Project Not Found."
      elsif project.claim != true
        puts "Denied."
      else
        puts "Success!"
      end
    end

    puts ""
    puts "Done!"
  end
end

desc 'Release project(s) on CodeFumes.com'
long_desc <<-DESC
  Releasing a project relinquishes ownership of the project...removing
  it from your account and making it available for others to claim
  ownership of (assuming they have the project's private key).

  Only the 'owner' of a project can release it.
  NOTE: This does NOT delete any data associated with the project.
    to delete a project entirely, use 'fumes delete'.
  DESC
command :release do |c|
  c.desc 'Public key of CodeFumes project'
  c.arg_name 'pub-key-here'
  c.default_value nil
  c.flag [:public_key, :p]

  c.desc 'Release all projects listed in your CodeFumes config file'
  c.switch [:all, :a]

  c.action do |global_options, options, args|
    public_keys_specified(options).each do |public_key|
      print "Releasing...'#{public_key}': "
      project = Project.find(public_key.to_s)

      if project.nil?
        puts "Project Not Found."
      elsif project.release != true
        puts "Denied."
      else
        puts "Success!"
      end
    end

    puts ""
    puts "Done!"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  print_api_mode_notification unless API.mode?(:production)
  true
end

post do |global,command,options,args|
  # Post logic here
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  case exception
    when CodeFumes::Errors::UnsupportedScmToolError
      puts "Unsupported repository type. Exiting..."
      exit(ExitCodes::UNSUPPORTED_SCM)
    when CodeFumes::Errors::UnknownProjectError
      msg =  "Could not find specified project on CodeFumes. "
      msg << "Please verify the key and try again. Exiting..."
      puts msg
      exit(ExitCodes::PROJECT_NOT_FOUND)
    when CodeFumes::Errors::NoUserApiKeyError
      msg =  "Unable to load an account API key from "
      msg << "your CodeFumes config file.\n"
      msg << "Log into your CodeFumes account, grab your API key, and run:\n"
      msg << "\tfumes setup YOUR-API-KEY-HERE\n\n"
      msg << "Exiting."
      puts msg
      exit(ExitCodes::NO_USER_CREDENTIALS)
    when CodeFumes::Errors::InsufficientCredentials
      msg =  "The API key in your CodeFumes config file is not "
      msg << "associated with the specified project. Please verify "
      msg << "your API key is identical to what is listed on your "
      msg << "CodeFumes.com account page"
      msg << "Exiting."
      puts msg
      exit(ExitCodes::INCORRECT_USER_CREDENTIALS)
    else
      puts "An unknown exception occurred ('#{exception.class.to_s}--#{exception}')."
      puts "Exiting..."
      exit(ExitCodes::UNKNOWN)
  end
  true
end

def public_keys_specified(options)
  return ConfigFile.public_keys if options[:all]
  [options[:public_key] || SourceControl.new('./').public_key]
end

def print_api_mode_notification
  puts "NOTE: Sending all requests & data to non-production server! (#{API.base_uri})"
end

GLI.run(ARGV)
