#!/usr/bin/env ruby
$: << File.expand_path(File.dirname(__FILE__) + '/../lib')

require 'codefumes'
require 'codefumes/cli_helpers'

begin
  require 'gli'
rescue LoadError
  require 'rubygems'
  gem 'gli'
  require 'gli'
end

include GLI
include CodeFumes
include CodeFumes::CLIHelpers


desc 'Synchronize local master branch history with a CodeFumes project'
command :sync do |c|
  c.desc 'Public key of CodeFumes project'
  c.arg_name 'pub-key-here'
  c.default_value nil
  c.flag [:p,:public_key]

  c.desc 'API key of CodeFumes project'
  c.arg_name 'api-key-here'
  c.default_value nil
  c.flag [:a,:api_key]

  c.action do |global_options,options,args|
    harvester = Harvester.new(:public_key => options[:p], :private_key => options[:a])

    if (results = harvester.publish_data!) == false
      puts "Error syncing with CodeFumes project. Please try again."
      exit(1)
    else
      if results.empty?
        puts "Local repository is in sync with server. No updates posted."
      else
        puts "Successfully saved #{results[:successful_count]} of #{results[:total_count]} payloads."
        puts "Project saved to CodeFumes.com. Visit #{harvester.short_uri}"
      end
      puts "Exiting."
      puts
    end
  end
end

desc 'Claim project(s) on CodeFumes.com'
long_desc <<-DESC
  Claiming a project links the specified key stored in the project
  repository (or the key specified as an argument) with the account
  credentials stored in your CodeFumes config file.
  DESC
command :claim do |c|
  c.desc 'Public key of CodeFumes project'
  c.arg_name 'pub-key-here'
  c.default_value nil
  c.flag [:public_key, :p]

  c.desc 'Claim all projects listed in your CodeFumes config file'
  c.switch [:all, :a]

  c.action do |global_options, options, args|
    issue_project_commands("Claiming", public_keys_specified(options)) do |project|
      wrap_with_standard_feedback(project) {project.claim}
    end
  end
end

desc 'Release project(s) on CodeFumes.com'
long_desc <<-DESC
  Releasing a project relinquishes ownership of the project...removing
  it from your account and making it available for others to claim
  ownership of (assuming they have the project's private key).  Only
  the 'owner' of a project can release it.  Also note that this does
  NOT delete any data associated with the project.  To delete a project
  and all associated data, use 'fumes delete'.
  DESC
command :release do |c|
  c.desc 'Public key of CodeFumes project'
  c.arg_name 'pub-key-here'
  c.default_value nil
  c.flag [:public_key, :p]

  c.desc 'Release all projects listed in your CodeFumes config file'
  c.switch [:all, :a]

  c.action do |global_options, options, args|
    issue_project_commands("Releasing", public_keys_specified(options)) do |project|
      wrap_with_standard_feedback(project) {project.release}
    end
  end
end

desc 'Delete project(s) on CodeFumes.com'
long_desc <<-DESC
  Deleting a project will remove the project and all associated data
  from CodeFumes.com.  If the command is issued inside an existing
  CodeFumes project, no flags are required.  Note that this action
  can't be reverted.
  DESC
command :delete do |c|
  c.desc 'Public key of CodeFumes project'
  c.arg_name 'pub-key-here'
  c.default_value nil
  c.flag [:public_key, :p]

  c.desc 'Delete all projects listed in your CodeFumes config file'
  c.switch [:all, :a]

  c.action do |global_options, options, args|
    issue_project_commands("Deleting", public_keys_specified(options)) do |project|
      wrap_with_standard_feedback(project) {project.delete}
    end
  end
end

desc 'Store (or clear) your api-key in the CodeFumes config file'
command :'api-key'do |c|
  c.desc 'Clear the API key currently stored in your CodeFumes config file'
  c.default_value false
  c.switch [:clear, :c]

  c.action do |global_options, options, args|
    if !options[:clear] && args.empty?
      raise Errors::NoApiKeySpecified
    end

    api_key = options[:clear] ? nil : args.first
    ConfigFile.save_credentials(api_key)

    if options[:clear]
      puts "Your API key has been removed from your CodeFumes config file."
    else
      puts "Your API key has been saved to your CodeFumes config file."
    end
  end
end

desc "Open a project in your default browser (requires 'launchy' gem)"
command :open do |c|
  c.desc 'Public key of CodeFumes project to open'
  c.arg_name 'pub-key-here'
  c.default_value nil
  c.flag [:public_key, :p]

  c.action do |global_options, options, args|
    msg = 'Opening CodeFumes project page'
    issue_project_commands(msg, public_keys_specified(options)) do |project|
      open_in_browser project.short_uri
    end
  end
end

pre do |global,command,options,args|
  unless API.mode?(:production) || command_doesnt_use_api?(command)
    print_api_mode_notification
  end
  true
end

post do |global,command,options,args|
end

on_error do |exception|
  case exception
    when CodeFumes::Errors::UnsupportedScmToolError
      puts "Unsupported repository type. Exiting..."
      exit(ExitCodes::UNSUPPORTED_SCM)
    when CodeFumes::Errors::UnknownProjectError
      msg =  "Could not find specified project on CodeFumes. "
      msg << "Please verify the key and try again. Exiting..."
      puts msg
      exit(ExitCodes::PROJECT_NOT_FOUND)
    when CodeFumes::Errors::NoUserApiKeyError
      msg =  "Unable to load an account API key from "
      msg << "your CodeFumes config file.\n"
      msg << "Log into your CodeFumes account, grab your API key, and run:\n"
      msg << "\tfumes setup YOUR-API-KEY-HERE\n\n"
      msg << "Exiting."
      puts msg
      exit(ExitCodes::NO_USER_CREDENTIALS)
    when CodeFumes::Errors::InsufficientCredentials
      msg =  "The API key in your CodeFumes config file is not "
      msg << "associated with the specified project. Please verify "
      msg << "your API key is identical to what is listed on your "
      msg << "CodeFumes.com account page"
      msg << "Exiting."
      puts msg
      exit(ExitCodes::INCORRECT_USER_CREDENTIALS)
    when Errors::NoApiKeySpecified
      puts "No API key specified. To clear your api-key, use the '-c/--clear' flag.\nExiting."
      exit(ExitCodes::NO_API_KEY_SPECIFIED)
    when RuntimeError
      # allow default handler to take over when invalid arguments are passed in
    else
      puts "An unknown exception occurred ('#{exception.class.to_s}--#{exception}')."
      puts "Backtrace:\n#{exception.backtrace}')."
      puts "Exiting..."
      exit(ExitCodes::UNKNOWN)
  end
  true
end

GLI.run(ARGV)
